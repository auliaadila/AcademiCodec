Initializing Training Process..
Number of GPU : 2
Batch size per GPU : 1
Encoder(
  (conv_pre): Conv1d(1, 32, kernel_size=(7,), stride=(1,), padding=(3,))
  (normalize): ModuleList(
    (0-2): 3 x GroupNorm(4, 64, eps=1e-06, affine=True)
    (3-5): 3 x GroupNorm(8, 128, eps=1e-06, affine=True)
    (6-8): 3 x GroupNorm(16, 256, eps=1e-06, affine=True)
    (9-11): 3 x GroupNorm(32, 512, eps=1e-06, affine=True)
  )
  (ups): ModuleList(
    (0): Conv1d(32, 64, kernel_size=(4,), stride=(2,), padding=(1,))
    (1): Conv1d(64, 128, kernel_size=(7,), stride=(3,), padding=(2,))
    (2): Conv1d(128, 256, kernel_size=(11,), stride=(5,), padding=(3,))
    (3): Conv1d(256, 512, kernel_size=(16,), stride=(8,), padding=(4,))
  )
  (resblocks): ModuleList(
    (0): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
        (1): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
        (2): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
      )
    )
    (1): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
        (1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
        (2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
      )
    )
    (2): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
        (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
        (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
      )
    )
    (3): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
        (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
        (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
      )
    )
    (4): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
        (1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
        (2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
      )
    )
    (5): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
        (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
        (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
      )
    )
    (6): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
        (1): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
        (2): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
      )
    )
    (7): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
        (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
        (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
      )
    )
    (8): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
        (1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
        (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      )
    )
    (9): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(512, 512, kernel_size=(11,), stride=(1,), padding=(5,))
        (1): Conv1d(512, 512, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
        (2): Conv1d(512, 512, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(512, 512, kernel_size=(11,), stride=(1,), padding=(5,))
      )
    )
    (10): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(512, 512, kernel_size=(7,), stride=(1,), padding=(3,))
        (1): Conv1d(512, 512, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
        (2): Conv1d(512, 512, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(512, 512, kernel_size=(7,), stride=(1,), padding=(3,))
      )
    )
    (11): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,))
        (1): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
        (2): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,))
      )
    )
  )
  (conv_post): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,))
)
Quantizer(
  (quantizer_modules): ModuleList(
    (0-1): 2 x Quantizer_module(
      (embedding): Embedding(1024, 256)
    )
  )
  (quantizer_modules2): ModuleList(
    (0-1): 2 x Quantizer_module(
      (embedding): Embedding(1024, 256)
    )
  )
)
Generator(
  (conv_pre): Conv1d(512, 512, kernel_size=(7,), stride=(1,), padding=(3,))
  (ups): ModuleList(
    (0): ConvTranspose1d(512, 256, kernel_size=(16,), stride=(8,), padding=(4,))
    (1): ConvTranspose1d(256, 128, kernel_size=(11,), stride=(5,), padding=(3,))
    (2): ConvTranspose1d(128, 64, kernel_size=(7,), stride=(3,), padding=(2,))
    (3): ConvTranspose1d(64, 32, kernel_size=(4,), stride=(2,), padding=(1,))
  )
  (resblocks): ModuleList(
    (0): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
        (1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
        (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
      )
    )
    (1): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
        (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
        (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
      )
    )
    (2): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
        (1): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
        (2): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
      )
    )
    (3): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
        (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
        (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
      )
    )
    (4): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
        (1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
        (2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
      )
    )
    (5): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
        (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
        (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
      )
    )
    (6): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
        (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
        (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
      )
    )
    (7): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
        (1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
        (2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,))
      )
    )
    (8): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
        (1): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
        (2): Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(64, 64, kernel_size=(11,), stride=(1,), padding=(5,))
      )
    )
    (9): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
        (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
        (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
      )
    )
    (10): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
        (1): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
        (2): Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(32, 32, kernel_size=(7,), stride=(1,), padding=(3,))
      )
    )
    (11): ResBlock1(
      (convs1): ModuleList(
        (0): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
        (1): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
        (2): Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
      )
      (convs2): ModuleList(
        (0-2): 3 x Conv1d(32, 32, kernel_size=(11,), stride=(1,), padding=(5,))
      )
    )
  )
  (conv_post): Conv1d(32, 1, kernel_size=(7,), stride=(1,), padding=(3,))
)
checkpoints directory :  checkpoints/test_kagayaki/config_24k_240d_4c.json
Epoch: 1
Steps : 0, Gen Loss Total : 213.560, Loss Q : 0.011, Mel-Spec. Error : 4.324, s/b : 5.504
Time taken for epoch 1 is 10 sec

Epoch: 2
Steps : 5, Gen Loss Total : 114.947, Loss Q : 0.077, Mel-Spec. Error : 2.270, s/b : 0.263
Time taken for epoch 2 is 16 sec

Epoch: 3
Steps : 10, Gen Loss Total : 66.101, Loss Q : 0.213, Mel-Spec. Error : 1.199, s/b : 0.265
Saving checkpoint to checkpoints/test_kagayaki/config_24k_240d_4c.json/g_00000010
Complete.
Saving checkpoint to checkpoints/test_kagayaki/config_24k_240d_4c.json/do_00000010
Complete.
Time taken for epoch 3 is 14 sec

Epoch: 4
Steps : 15, Gen Loss Total : 91.140, Loss Q : 0.241, Mel-Spec. Error : 1.778, s/b : 0.442
Time taken for epoch 4 is 11 sec

Epoch: 5
Steps : 20, Gen Loss Total : 60.525, Loss Q : 0.306, Mel-Spec. Error : 1.127, s/b : 0.273
Saving checkpoint to checkpoints/test_kagayaki/config_24k_240d_4c.json/g_00000020
Complete.
Saving checkpoint to checkpoints/test_kagayaki/config_24k_240d_4c.json/do_00000020
Complete.
Time taken for epoch 5 is 14 sec

Epoch: 6
Steps : 25, Gen Loss Total : 57.195, Loss Q : 0.298, Mel-Spec. Error : 1.066, s/b : 0.279
Time taken for epoch 6 is 11 sec

Epoch: 7
Steps : 30, Gen Loss Total : 63.318, Loss Q : 0.503, Mel-Spec. Error : 1.071, s/b : 0.269
Saving checkpoint to checkpoints/test_kagayaki/config_24k_240d_4c.json/g_00000030
Complete.
Saving checkpoint to checkpoints/test_kagayaki/config_24k_240d_4c.json/do_00000030
Complete.
Time taken for epoch 7 is 13 sec

Epoch: 8
Steps : 35, Gen Loss Total : 73.026, Loss Q : 0.640, Mel-Spec. Error : 1.230, s/b : 0.259
Time taken for epoch 8 is 11 sec

Epoch: 9
Steps : 40, Gen Loss Total : 77.277, Loss Q : 0.714, Mel-Spec. Error : 1.383, s/b : 0.257
Saving checkpoint to checkpoints/test_kagayaki/config_24k_240d_4c.json/g_00000040
Complete.
Saving checkpoint to checkpoints/test_kagayaki/config_24k_240d_4c.json/do_00000040
Complete.
Time taken for epoch 9 is 14 sec

Epoch: 10
Steps : 45, Gen Loss Total : 74.621, Loss Q : 0.835, Mel-Spec. Error : 1.315, s/b : 0.257
Total number of steps: 50
Time taken for epoch 10 is 11 sec

Total number of steps: 50
Training Process Finished!
